---
- name: Time configuration
  hosts: all
  become: 'yes'

  tasks:
    - name: set timezone
      shell:
        timedatectl set-timezone  Asia/Yekaterinburg

    - name: timesync-status
      shell:
        timedatectl timesync-status
      register: results
    - debug:
       var: results.stdout_lines

    - name: print timedatectl
      shell:
        timedatectl
      register: results
    - debug:
       var: results.stdout_lines

    - name: print date
      shell:
        date
      register: results
    - debug:
       var: results.stdout_lines

# Генерируем ssh ключи на client для последующего использования
- name: ssh keygen end copy on client
  hosts: borgc
  become: true

  tasks:
    - name: ssh keygen rsa
      command : ssh-keygen -q -t rsa -f /root/.ssh/id_rsa -C "" -N ""
      args:
        creates: /root/.ssh/id_rsa

    - name: copy pub keys file on local vm
      fetch:
        src: /root/.ssh/id_rsa.pub
        dest: ../files/

    - name: add server-backup to /.ssh/known_hosts
      shell:
        ssh-keyscan 192.168.57.160 >> ~/.ssh/known_hosts


    - name: restart ssh
      systemd:
        name: sshd
        state: restarted

#    - name: Create a 2048-bit SSH key for user jsmith in ~jsmith/.ssh/id_rsa
#      ansible.builtin.user:
#        name: jsmith
#        generate_ssh_key: yes
#        ssh_key_bits: 2048
#        ssh_key_file: .ssh/id_rsa


 # Конфигурация сервера backup
- name: Install and config borg to backup server
  hosts: borgs
  become: true

  tasks:
    - name: Install borgbackup
      apt:
        name: borgbackup
        state: present
        update_cache: yes

    - name: Create user borg
      user:
        name: borg
        password: "{{ 'Otus123!' | password_hash('sha512') }}"
        shell: /bin/bash
        create_home: yes
        state: present

    - name: format disk sdc
      filesystem: dev=/dev/sdc fstype=ext4

    - name: mount disk sdc to /var/backup
      mount:
        path: "/var/backup"
        src: /dev/sdc
        state: mounted
        fstype: ext4

    - name: check mount disk lsblk
      shell:
        lsblk -f
      register: results
    - debug:
       var: results.stdout_lines

    - name: check mount disk df -h
      shell:
        df -h
      register: results
    - debug:
       var: results.stdout_lines

    - name: Create dir for backup
      file:
        path: /var/backup
        state: directory
        owner: borg
        group: borg
        mode: '0700'

    - name: clean dir old files
      shell: rm -rf /var/backup/*

    - name: Creates directory .ssh
      file:
        path: /home/borg/.ssh
        state: directory
        mode: '0700'
        owner: borg
        group: borg

    - name: copy ssh-key
      copy:
        src: ../files/borgc/root/.ssh/id_rsa.pub
        dest:  /home/borg/.ssh/authorized_keys
        mode: '0600'
        owner: borg
        group: borg

    - name: restart ssh
      systemd:
        name: sshd
        state: restarted

# Конфигурируем client для выполнения бэкапов
- name: Install and config borg to client
  hosts: borgc
  become: true

  tasks:
    - name: Install borgbackup
      apt:
        name: borgbackup
        state: present
        update_cache: yes

#Инициализируем репозиторий borg на backup сервере с client сервера

    - name: borg repo inicializate on client
      command: borg init --encryption=repokey
      environment:
        BORG_REPO: '{{ "borg@192.168.57.160:/var/backup/" }}'
        BORG_PASSPHRASE: '{{ "Otus123!" }}'
#      when: result.rc == 2
#      register: result
#      changed_when: result.rc == 0
#      failed_when: result.rc == 2 and 'A repository already exists at' not in result.stderr or result.rc != 2 and result.rc != 0

#Автоматизируем создание бэкапов с помощью systemd
#Создаем сервис и таймер в каталоге /etc/systemd/system/

    - name: Copy script file to VM
      copy:
        src: "{{item.src}}"
        dest: "{{item.dest}}"
      loop:
        - {src: '../files/borg-backup.service', dest: '/etc/systemd/system/borg-backup.service'}
        - {src: '../files/borg-backup.timer', dest: '/etc/systemd/system/borg-backup.timer'}

    - name: Just force systemd to reread configs (2.4 and above)
      systemd:
        daemon_reload: yes

# Включаем и запускаем службу таймера        
    - name: enable borg-backup.timer
      systemd:
        name: borg-backup.timer
        state: started
        enabled: yes

# Проверяем работу таймера
    - name: nginx error log configuration
      shell:
        systemctl list-timers --all
      register: results
    - debug:
       var: results.stdout_lines
