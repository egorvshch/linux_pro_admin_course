---
#- name: Main configuration on DB_Slave server
#  hosts: dbslave
#  become: 'yes'

#  vars:
#   mysql_root_pass: "pass123"
#   mysql_wp_pass: "pass123"
#   mysql_user_pass: "pass123"
#   master_host: "192.168.50.110"

#  tasks:

- name: Install MySQL server and packages
  apt:
    name:
      - mysql-server
      - python3-pip
      - sshpass
    state: present
    update_cache: yes

- name: Install PyMySQL
  pip:
    name: PyMySQL

- name: Start MySQL
  service:
    name: mysql
    state: started
    enabled: yes

- name: Delete old config MySQL "/etc/mysql/mysql.conf.d/mysqld.cnf"
  file:
    path: /etc/mysql/mysql.conf.d/mysqld.cnf
    state: absent

- name: Copy config file to Slave DB server
  copy:
    src: files/mysqld_slave.cnf
    dest: /etc/mysql/mysql.conf.d/mysqld.cnf
    owner: root
    group: root
    mode: 0644
- name: Restart MySQL
  systemd:
    name: mysql
    state: restarted

- name: Generate ".my.cnf" file on Slave DB server
  shell: "echo \"[mysql]\nuser='root'\npassword='{{ mysql_root_pass }}'\n\" > /root/.my.cnf"
  args:
    creates: /root/.my.cnf
- name: Restart MySQL
  systemd:
    name: mysql
    state: restarted


- name: Set root password on MySQL service
  mysql_user:
    name: root
    host: localhost
    password: "{{ mysql_root_pass }}"
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: present
    update_password: on_create
- name: Restart MySQL
  systemd:
    name: mysql
    state: restarted

- name: Stop replication
  mysql_replication:
    mode: stopreplica
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Config replication
  mysql_replication:
    mode: changeprimary
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    master_host: "{{ master_host }}"
    master_port: 3306
    master_auto_position: yes
    master_user: "repl"
    master_password: "{{ mysql_user_pass }}"
#- name: Restart MySQL
#  systemd:
#    name: mysql
#    state: restarted

- name: Get new Dump DB from Master DB
  mysql_db:
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: dump
    name: all
    target: /tmp/master.sql
  delegate_to: "{{ hostvars['dbmaster'].inventory_hostname }}"

#  copy:
#    src: files/master.sql
#    dest: /home/vagrant/master.sql
#    owner: root
#    group: root
#    mode: 0644



- name: Copy new DB Dump from Master DB
  synchronize:
    mode: push
    src: /tmp/master.sql
    dest: /tmp/
  delegate_to: "{{ hostvars['dbmaster'].inventory_hostname }}"

- name: Load DB dump
  mysql_db:
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    name: all
    state: import
    target: /tmp/master.sql

#- name: Deleting DB dump
#  file:
#    path: /tmp/master.sql
#    state: absent

- name: Start replication
  mysql_replication:
    mode: startreplica
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Create directory for MySQL backups
  file:
    path: /home/vagrant/db_backup
    state: directory
    owner: vagrant
    group: vagrant
    mode: 0755

- name: Copy script for DB Backup
  copy:
    src: files/backup_db.sh
    dest: /home/vagrant/backup_db.sh
    owner: vagrant
    group: vagrant
    mode: 0755

- name: Create cron file in /etc/cron.d
  cron:
    name: MySQL backup
    weekday: "6"
    minute: "0"
    hour: "22"
    user: root
    job: "/home/vagrant/backup_db.sh"
    cron_file: mysql_backup

#  handlers:
- name: Restart MySQL
  systemd:
    name: mysql
    state: restarted

- include_tasks: dbslave/preinstall.yml
- include_tasks: dbslave/firewall.yml
...
