---
#- name: MAin configuration on DB_Master server
#  hosts: dbmaster
#  become: 'yes'

#  vars:
#   mysql_root_pass: "pass123"
#   mysql_wp_pass: "pass123"
#   mysql_user_pass: "pass123"

#  tasks:

- name: Install MySQL server and packages
  apt:
    name:
      - mysql-server
      - python3-pip
      - sshpass
    state: present
    update_cache: yes

- name: Install PyMySQL
  pip:
    name: PyMySQL

- name: Start MySQL
  service:
    name: mysql
    state: started
    enabled: yes

- name: Delete old config MySQL "/etc/mysql/mysql.conf.d/mysqld.cnf"
  file:
    path: /etc/mysql/mysql.conf.d/mysqld.cnf
    state: absent

- name: Copy config file to Master DB server
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - { src: "files/mysqld_master.cnf", dest: "/etc/mysql/mysql.conf.d/mysql.cnf" }
    - { src: "files/mysqldump.cnf", dest: "/etc/mysql/conf.d/mysqldump.cnf" }
- name: Restart MySQL
  systemd:
    name: mysql
    state: restarted

- name: Generate ".my.cnf" file on Master DB server
  shell: "echo \"[mysql]\nuser='root'\npassword='{{ mysql_root_pass }}'\n\" > /root/.my.cnf"
  args:
    creates: /root/.my.cnf
- name: Restart MySQL
  systemd:
    name: mysql
    state: restarted


- name: Set root password on MySQL service
  mysql_user:
    name: root
    host: localhost
    password: "{{ mysql_root_pass }}"
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: present
    update_password: on_create
- name: Restart MySQL
  systemd:
    name: mysql
    state: restarted

- name: Create DB "wpress_db"
  mysql_db:
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    name: wpress_db
    state: present

- name: Create wordpress user
  mysql_user:
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    name: wp_user
    password: "{{ mysql_wp_pass }}"
    host: '%'
    priv: 'wpress_db.*:ALL'

- name: Create replication user
  mysql_user:
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    name: repl
    password: "{{ mysql_user_pass }}"
    host: '%'
    priv: '*.*:REPLICATION SLAVE'

#- name: Copy DB Dump
#  copy:
#    src: files/master2.sql
#    dest: /tmp/master.sql

- name: Stopping replication
  mysql_replication:
    mode: stopreplica
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  delegate_to: "{{ hostvars['dbslave'].inventory_hostname }}"

- name: Creating new dump on slave
  shell: mysqldump --all-databases --add-drop-table --create-options --disable-keys \
                   --extended-insert --single-transaction --quick --events --routines \
                   --set-gtid-purged=OFF --triggers --source-data=0 --skip-lock-tables \
                   --flush-privileges \
                   -u root -p{{ mysql_root_pass }} > /tmp/master.sql
  delegate_to: "{{ hostvars['dbslave'].inventory_hostname }}"

- name: Copying new DB dump to Master
  synchronize:
    mode: push
    src: /tmp/master.sql
    dest: /tmp/
  delegate_to: "{{ hostvars['dbslave'].inventory_hostname }}"

- name: Load DB Dump
  mysql_db:
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    name: all
    state: import
    target: /tmp/master.sql

- name: Delete DB Dump
  file:
    path: /tmp/master.sql
    state: absent

- name: Delete DB Dump on Slave
  file:
    path: /tmp/master.sql
    state: absent
  delegate_to: "{{ hostvars['dbslave'].inventory_hostname }}"

- name: Reset master on replication
  mysql_replication:
    mode: resetprimary
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  delegate_to: "{{ hostvars['dbslave'].inventory_hostname }}"

- name: Reset master on replication
  mysql_replication:
    mode: resetreplica
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  delegate_to: "{{ hostvars['dbslave'].inventory_hostname }}"

- name: Get new dump from Master
  mysql_db:
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: dump
    name: all
    target: /tmp/master.sql

- name: Copying new DB dump from Master
  synchronize:
    mode: pull
    src: /tmp/master.sql
    dest: /tmp/
  delegate_to: "{{ hostvars['dbslave'].inventory_hostname }}"

- name: Loading DB dump
  mysql_db:
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    name: all
    state: import
    target: /tmp/master.sql
  delegate_to: "{{ hostvars['dbslave'].inventory_hostname }}"

- name: Delete DB Dump on Slave
  file:
    path: /tmp/master.sql
    state: absent
  delegate_to: "{{ hostvars['dbslave'].inventory_hostname }}"

- name: Delete DB Dump on Slave
  file:
    path: /tmp/master.sql
    state: absent

- name: Starting replication on slave
  mysql_replication:
    mode: startreplica
    login_user: root
    login_password: "{{ mysql_root_pass }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  delegate_to: "{{ hostvars['dbslave'].inventory_hostname }}"

- name: Restart MySQL
  systemd:
    name: mysql
    state: restarted

- name: Restart MySQL
  systemd:
    name: mysql
    state: restarted
  delegate_to: "{{ hostvars['dbslave'].inventory_hostname }}"

- include_tasks: dbmaster/preinstall.yml
- include_tasks: dbmaster/firewall.yml
...
